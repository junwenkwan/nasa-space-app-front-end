{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Desktop/nasa-space-app-front-end/src/App.js\";\nimport React from \"react\";\nimport \"@reach/combobox/styles.css\"; //google search autocomplete\n\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\"; //click combobox\n\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport { formatRelative } from \"date-fns\"; //sidebar.js\n\nimport Sidebar from './Sidebar'; //change map style\n\nimport mapStyles from \"./mapStyles\"; //google map API\n\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"100vh\",\n  width: \"100vw\"\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst center = {\n  lat: -37.560902,\n  lng: 143.854965\n};\nexport default function App() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null);\n  const onMapClick = React.useCallback(e => {\n    console.log(e.latLng.lat());\n    console.log(e.latLng.lng()); // fetch('http://3.133.101.18/predict', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Accept': 'application/json',\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     latitude: e.latLng.lat(),\n    //     longitude: e.latLng.lng(),\n    //   })\n    // })\n    // probably where the POST API will be which then will setState GoogleMap InfoWindow below\n\n    setMarkers(current => [...current, {\n      lat: e.latLng.lat(),\n      lng: e.latLng.lng(),\n      time: new Date()\n    }]);\n    console.log(time);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(14);\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n  const items = [{\n    name: 'Map',\n    label: 'Map'\n  }, {\n    name: 'Education',\n    label: 'Education'\n  }, {\n    name: 'Charity',\n    label: 'Charity'\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sidebar, {\n    items: items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"map\",\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: `${marker.lat}-${marker.lng}`,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    onClick: () => {\n      setSelected(marker);\n    },\n    icon: {\n      url: `/logo.svg`,\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(15, 15),\n      scaledSize: new window.google.maps.Size(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => {\n      setSelected(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, \"Fire spotted !\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Spotted \", formatRelative(selected.time, new Date())))) : null));\n}\n\nfunction Locate({\n  panTo\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"/locate_me.png\",\n    alt: \"compass - locate me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Search({\n  panTo\n}) {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => -37.560902,\n        lng: () => 143.854965\n      },\n      radius: 100 * 1000\n    }\n  });\n\n  const handleInput = e => {\n    setValue(e.target.value);\n  };\n\n  const handleSelect = async address => {\n    setValue(address, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({\n        address\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      panTo({\n        lat,\n        lng\n      });\n    } catch (error) {\n      console.log(\"ðŸ˜± Error: \", error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Search your location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }, status === \"OK\" && data.map(({\n    id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/jason/Desktop/nasa-space-app-front-end/src/App.js"],"names":["React","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","formatRelative","Sidebar","mapStyles","GoogleMap","useLoadScript","Marker","InfoWindow","libraries","mapContainerStyle","height","width","options","styles","disableDefaultUI","zoomControl","center","lat","lng","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","onMapClick","useCallback","e","console","log","latLng","current","time","Date","mapRef","useRef","onMapLoad","map","panTo","setZoom","items","name","label","marker","url","origin","window","google","maps","Point","anchor","scaledSize","Size","Locate","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Search","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","radius","handleInput","target","handleSelect","address","results","error","id","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport \"@reach/combobox/styles.css\";\r\n\r\n//google search autocomplete\r\nimport usePlacesAutocomplete, {\r\n  getGeocode,\r\n  getLatLng,\r\n} from \"use-places-autocomplete\";\r\n\r\n//click combobox\r\nimport {\r\nCombobox,\r\nComboboxInput,\r\nComboboxPopover,\r\nComboboxList,\r\nComboboxOption,\r\n} from \"@reach/combobox\";\r\n\r\nimport { formatRelative } from \"date-fns\";\r\n\r\n//sidebar.js\r\nimport Sidebar from './Sidebar';\r\n\r\n//change map style\r\nimport mapStyles from \"./mapStyles\";\r\n\r\n//google map API\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Marker,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\n\r\nconst libraries = [\"places\"];\r\nconst mapContainerStyle = {\r\n  height: \"100vh\",\r\n  width: \"100vw\",\r\n};\r\nconst options = {\r\n  styles: mapStyles,\r\n  disableDefaultUI: true,\r\n  zoomControl: true,\r\n};\r\nconst center = {\r\n  lat: -37.560902,\r\n  lng: 143.854965,\r\n};\r\n\r\nexport default function App() {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n    libraries,\r\n  });\r\n  const [markers, setMarkers] = React.useState([]);\r\n  const [selected, setSelected] = React.useState(null);\r\n\r\n  const onMapClick = React.useCallback((e) => {\r\n    console.log(e.latLng.lat());\r\n    console.log(e.latLng.lng());\r\n    // fetch('http://3.133.101.18/predict', {\r\n    //   method: 'POST',\r\n    //   headers: {\r\n    //     'Accept': 'application/json',\r\n    //     'Content-Type': 'application/json',\r\n    //   },\r\n    //   body: JSON.stringify({\r\n    //     latitude: e.latLng.lat(),\r\n    //     longitude: e.latLng.lng(),\r\n    //   })\r\n    // })\r\n    // probably where the POST API will be which then will setState GoogleMap InfoWindow below\r\n\r\n    setMarkers((current) => [\r\n        ...current,\r\n        {\r\n        lat: e.latLng.lat(),\r\n        lng: e.latLng.lng(),\r\n        time: new Date(),\r\n        },\r\n    ]);\r\n    console.log(time);\r\n  }, []);\r\n\r\n  const mapRef = React.useRef();\r\n      const onMapLoad = React.useCallback((map) => {\r\n      mapRef.current = map;\r\n  }, []);\r\n\r\n  const panTo = React.useCallback(({ lat, lng }) => {\r\n      mapRef.current.panTo({ lat, lng });\r\n      mapRef.current.setZoom(14);\r\n  }, []);\r\n\r\n  if (loadError) return \"Error\";\r\n  if (!isLoaded) return \"Loading...\";\r\n\r\n  const items = [\r\n      { name: 'Map', label: 'Map' },\r\n      { name: 'Education', label: 'Education' },\r\n      { name: 'Charity', label: 'Charity' },\r\n]\r\n  return (\r\n    <div>\r\n      <Search panTo={panTo} />\r\n      <Locate panTo={panTo} />\r\n      \r\n      <Sidebar items={items} />\r\n\r\n      <GoogleMap\r\n        id=\"map\"\r\n        mapContainerStyle={mapContainerStyle}\r\n        zoom={8}\r\n        center={center}\r\n        options={options}\r\n        onClick={onMapClick}\r\n        onLoad={onMapLoad}\r\n      >\r\n        {markers.map((marker) => (\r\n          <Marker\r\n            key={`${marker.lat}-${marker.lng}`}\r\n            position={{ lat: marker.lat, lng: marker.lng }}\r\n            onClick={() => {\r\n              setSelected(marker);\r\n            }}\r\n            icon={{\r\n              url: `/logo.svg`,\r\n              origin: new window.google.maps.Point(0, 0),\r\n              anchor: new window.google.maps.Point(15, 15),\r\n              scaledSize: new window.google.maps.Size(30, 30),\r\n            }}\r\n          />\r\n        ))}\r\n\r\n        {selected ? (\r\n          <InfoWindow\r\n            position={{ lat: selected.lat, lng: selected.lng }}\r\n            onCloseClick={() => {\r\n              setSelected(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>\r\n                Fire spotted !\r\n              </h2>\r\n              <p>Spotted {formatRelative(selected.time, new Date())}</p>\r\n            </div>\r\n          </InfoWindow>\r\n        ) : null}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Locate({panTo}) {\r\n  return (\r\n    <button\r\n      className=\"locate\" \r\n      onClick={() => {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            panTo({\r\n              lat: position.coords.latitude,\r\n              lng: position.coords.longitude,\r\n            });\r\n          },\r\n        () => null\r\n        );\r\n      }}>\r\n      <img src='/locate_me.png' alt=\"compass - locate me\"/>\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Search({ panTo }) {\r\n  const {\r\n    ready,\r\n    value,\r\n    suggestions: { status, data },\r\n    setValue,\r\n    clearSuggestions,\r\n  } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      location: { lat: () => -37.560902, lng: () => 143.854965 },\r\n      radius: 100 * 1000,\r\n    },\r\n  });\r\n\r\n  const handleInput = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleSelect = async (address) => {\r\n    setValue(address, false);\r\n    clearSuggestions();\r\n\r\n    try {\r\n      const results = await getGeocode({ address });\r\n      const { lat, lng } = await getLatLng(results[0]);\r\n      panTo({ lat, lng });\r\n    } catch (error) {\r\n      console.log(\"ðŸ˜± Error: \", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <Combobox onSelect={handleSelect}>\r\n        <ComboboxInput\r\n          value={value}\r\n          onChange={handleInput}\r\n          disabled={!ready}\r\n          placeholder=\"Search your location\"\r\n        />\r\n        <ComboboxPopover>\r\n          <ComboboxList>\r\n            {status === \"OK\" &&\r\n              data.map(({ id, description }) => (\r\n                <ComboboxOption key={id} value={description} />\r\n              ))}\r\n          </ComboboxList>\r\n        </ComboboxPopover>\r\n      </Combobox>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}